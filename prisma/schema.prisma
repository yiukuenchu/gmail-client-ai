// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    syncStatus    SyncStatus   @default(PENDING)
    lastSyncedAt  DateTime?
    accounts      Account[]
    sessions      Session[]
    threads       Thread[]
    labels        Label[]
    syncJobs      SyncJob[]
    drafts        Draft[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Gmail-specific models
model Thread {
    id               String    @id @default(cuid())
    userId           String
    gmailThreadId    String
    subject          String
    snippet          String    @db.Text
    lastMessageDate  DateTime
    unread           Boolean   @default(false)
    starred          Boolean   @default(false)
    important        Boolean   @default(false)
    messageCount     Int       @default(1)
    createdAt        DateTime  @default(now())
    updatedAt        DateTime  @updatedAt

    user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    messages         Message[]
    labelThreads     LabelThread[]

    @@unique([userId, gmailThreadId])
    @@index([userId, lastMessageDate])
    @@index([userId, unread])
    @@index([subject])
}

model Message {
    id               String       @id @default(cuid())
    threadId         String
    gmailMessageId   String       @unique
    gmailThreadId    String
    from             String
    to               String[]
    cc               String[]
    bcc              String[]
    subject          String
    snippet          String       @db.Text
    date             DateTime
    htmlS3Key        String?      // S3 key for HTML content
    textContent      String?      @db.Text
    inReplyTo        String?
    references       String[]
    labelIds         String[]
    createdAt        DateTime     @default(now())

    thread           Thread       @relation(fields: [threadId], references: [id], onDelete: Cascade)
    attachments      Attachment[]

    @@index([gmailMessageId])
    @@index([threadId])
    @@index([from])
    @@index([date])
}

model Attachment {
    id               String   @id @default(cuid())
    messageId        String
    filename         String
    mimeType         String
    size             Int
    s3Key            String
    gmailAttachmentId String
    createdAt        DateTime @default(now())

    message          Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

    @@index([messageId])
}

model Label {
    id               String        @id @default(cuid())
    userId           String
    gmailLabelId     String
    name             String
    type             LabelType
    color            String?
    messageListVisibility String?
    labelListVisibility String?
    createdAt        DateTime      @default(now())

    user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    labelThreads     LabelThread[]

    @@unique([userId, gmailLabelId])
    @@index([userId])
}

model LabelThread {
    labelId          String
    threadId         String
    createdAt        DateTime @default(now())

    label            Label    @relation(fields: [labelId], references: [id], onDelete: Cascade)
    thread           Thread   @relation(fields: [threadId], references: [id], onDelete: Cascade)

    @@id([labelId, threadId])
    @@index([threadId])
    @@index([labelId])
}

model SyncJob {
    id               String       @id @default(cuid())
    userId           String
    status           JobStatus
    type             SyncType
    progress         Float        @default(0)
    totalItems       Int          @default(0)
    processedItems   Int          @default(0)
    error            String?
    startedAt        DateTime     @default(now())
    completedAt      DateTime?
    nextPageToken    String?

    user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId, status])
    @@index([startedAt])
}

model Draft {
    id               String       @id @default(cuid())
    userId           String
    threadId         String?
    to               String[]
    cc               String[]
    bcc              String[]
    subject          String
    htmlContent      String       @db.Text
    textContent      String       @db.Text
    attachmentS3Keys String[]
    inReplyTo        String?
    references       String[]
    createdAt        DateTime     @default(now())
    updatedAt        DateTime     @updatedAt

    user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

// Enums
enum SyncStatus {
    PENDING
    SYNCING
    COMPLETED
    FAILED
}

enum LabelType {
    SYSTEM
    USER
}

enum JobStatus {
    PENDING
    RUNNING
    COMPLETED
    FAILED
    CANCELLED
}

enum SyncType {
    FULL
    PARTIAL
    WEBHOOK
}